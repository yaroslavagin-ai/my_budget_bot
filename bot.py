import asyncio
import logging
import sqlite3
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command

# -------------------- –ù–ê–°–¢–†–û–ô–ö–ò --------------------
API_TOKEN = os.getenv("BOT_TOKEN")
logging.basicConfig(level=logging.INFO)

# SQLite
conn = sqlite3.connect("bot_data.db")
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    income REAL,
    method TEXT
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS expenses (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    name TEXT,
    amount REAL
)
""")
conn.commit()

# -------------------- –°–û–°–¢–û–Ø–ù–ò–Ø --------------------
class BudgetStates(StatesGroup):
    income = State()
    expenses = State()
    confirm_expenses = State()
    method = State()
    reflection = State()

# -------------------- –ö–ù–û–ü–ö–ò --------------------
def start_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–µ—Ö–∞–ª–∏", callback_data="start_income")]
    ])

def confirm_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ", callback_data="confirm_expenses")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_expenses")],
        [InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="restart")]
    ])

def next_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞–ª–µ–µ", callback_data="next")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")],
        [InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="restart")]
    ])

def method_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="50/30/20", callback_data="method_50_30_20")],
        [InlineKeyboardButton(text="60/20/20", callback_data="method_60_20_20")],
        [InlineKeyboardButton(text="40/20/40", callback_data="method_40_20_40")],
        [InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="restart")]
    ])

def reflection_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data="reflection_yes")],
        [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="reflection_no")],
        [InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="restart")]
    ])

# -------------------- –õ–û–ì–ò–ö–ê --------------------
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –°—Ç–∞—Ä—Ç
@dp.message(Command("start"))
async def start_cmd(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–≤–æ–π –±—é–¥–∂–µ—Ç!", reply_markup=start_keyboard())

# –í–≤–æ–¥ –¥–æ—Ö–æ–¥–∞
@dp.callback_query(lambda c: c.data == "start_income")
async def ask_income(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞. –í —Ñ–æ—Ä–º–∞—Ç–µ: 100000", reply_markup=next_keyboard())
    await state.set_state(BudgetStates.income)

@dp.message(BudgetStates.income)
async def save_income(message: types.Message, state: FSMContext):
    try:
        income = float(message.text.replace(" ", "").replace(",", "."))
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 100000")
        return
    user_id = message.from_user.id
    username = message.from_user.username or "unknown"

    cursor.execute("INSERT OR REPLACE INTO users (user_id, username, income) VALUES (?, ?, ?)",
                   (user_id, username, income))
    conn.commit()

    await state.set_state(BudgetStates.expenses)
    await message.answer(
        "–ö–∞–∫–∏–µ —É —Ç–µ–±—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏?\n"
        "–í–≤–µ–¥–∏ –∫–∞–∂–¥—ã–π –ø–ª–∞—Ç—ë–∂ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –Ω–∞–∑–≤–∞–Ω–∏–µ - —Å—É–º–º–∞\n"
        "–ü—Ä–∏–º–µ—Ä:\n–ê—Ä–µ–Ω–¥–∞ - 25 000\n–ö—Ä–µ–¥–∏—Ç - 10 000",
        reply_markup=next_keyboard()
    )

# –í–≤–æ–¥ —Ä–∞—Å—Ö–æ–¥–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–æ–∫ –∏ —Ñ–æ—Ä–º–∞—Ç–∞ 25 000
@dp.message(BudgetStates.expenses)
async def save_expenses(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    lines = message.text.strip().split("\n")
    errors = []

    for line in lines:
        if "-" not in line:
            errors.append(line)
            continue
        try:
            name, amount = line.split("-", 1)
            name = name.strip()
            amount = float(amount.strip().replace(" ", "").replace(",", "."))
            cursor.execute("INSERT INTO expenses (user_id, name, amount) VALUES (?, ?, ?)",
                           (user_id, name, amount))
        except:
            errors.append(line)

    conn.commit()

    if errors:
        await message.answer("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç—Ä–æ–∫–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å:\n" + "\n".join(errors) +
                             "\n–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: –ù–∞–∑–≤–∞–Ω–∏–µ - —Å—É–º–º–∞")
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    cursor.execute("SELECT name, amount FROM expenses WHERE user_id = ?", (user_id,))
    rows = cursor.fetchall()
    text = "üìã –Ø –∑–∞–ø–∏—Å–∞–ª —Ç–≤–æ–∏ –ø–ª–∞—Ç–µ–∂–∏:\n"
    total = 0
    for r in rows:
        text += f"- {r[0]}: {r[1]}\n"
        total += r[1]
    text += f"–ò—Ç–æ–≥–æ: {total}"
    await message.answer(text, reply_markup=confirm_keyboard())
    await state.set_state(BudgetStates.confirm_expenses)

# (–û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤
@dp.callback_query(lambda c: c.data in ["confirm_expenses", "edit_expenses", "restart"])
async def confirm_expenses(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if callback.data == "confirm_expenses":
        cursor.execute("SELECT income FROM users WHERE user_id = ?", (user_id,))
        income = cursor.fetchone()[0]
        cursor.execute("SELECT SUM(amount) FROM expenses WHERE user_id = ?", (user_id,))
        expenses = cursor.fetchone()[0] or 0
        leftover = income - expenses
        sign = "üü¢" if leftover >= 0 else "üî¥"
        await callback.message.answer(
            f"üí∞ –î–æ—Ö–æ–¥: {income}\n"
            f"üí∏ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏: {expenses}\n"
            f"{sign} –û—Å—Ç–∞—Ç–æ–∫: {leftover}",
            reply_markup=method_keyboard()
        )
        await state.set_state(BudgetStates.method)
    elif callback.data == "edit_expenses":
        cursor.execute("DELETE FROM expenses WHERE user_id = ?", (user_id,))
        conn.commit()
        await callback.message.answer("–í–≤–µ–¥–∏ –ø–ª–∞—Ç–µ–∂–∏ –∑–∞–Ω–æ–≤–æ:", reply_markup=next_keyboard())
        await state.set_state(BudgetStates.expenses)
    elif callback.data == "restart":
        cursor.execute("DELETE FROM users WHERE user_id = ?", (user_id,))
        cursor.execute("DELETE FROM expenses WHERE user_id = ?", (user_id,))
        conn.commit()
        await state.clear()
        await callback.message.answer("üîÑ –ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ!", reply_markup=start_keyboard())

# –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞
@dp.callback_query(lambda c: c.data.startswith("method"))
async def choose_method(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    cursor.execute("SELECT income FROM users WHERE user_id = ?", (user_id,))
    income = cursor.fetchone()[0]
    cursor.execute("SELECT SUM(amount) FROM expenses WHERE user_id = ?", (user_id,))
    expenses = cursor.fetchone()[0] or 0
    leftover = income - expenses

    method = callback.data.split("_")[1:]
    parts = [int(x) for x in method]
    chosen = f"{parts[0]}/{parts[1]}/{parts[2]}"

    cursor.execute("UPDATE users SET method = ? WHERE user_id = ?", (chosen, user_id))
    conn.commit()

    fact_percent = round(expenses / income * 100, 1)
    text = f"üìä –¢–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã = {fact_percent}% –æ—Ç –¥–æ—Ö–æ–¥–∞\n"
    text += f"–¢—ã –≤—ã–±—Ä–∞–ª –º–µ—Ç–æ–¥ {chosen}\n\n"

    must_pay = round(income * parts[0] / 100)
    wants = round(income * parts[1] / 100)
    savings = round(income * parts[2] / 100)

    text += "‚úÖ –ò—Ç–æ–≥–æ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:\n"
    text += f"- –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏: {expenses} (–ø–æ –º–µ—Ç–æ–¥—É –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è {must_pay})\n"
    text += f"- –ñ–µ–ª–∞–Ω–∏—è: {wants}\n"
    text += f"- –ù–∞–∫–æ–ø–ª–µ–Ω–∏—è: {savings}\n"
    if leftover >= 0:
        text += f"üü¢ –£ —Ç–µ–±—è –æ—Å—Ç–∞—ë—Ç—Å—è {leftover}\n"
    else:
        text += f"üî¥ –†–∞—Å—Ö–æ–¥—ã –ø—Ä–µ–≤—ã—à–∞—é—Ç –¥–æ—Ö–æ–¥—ã –Ω–∞ {abs(leftover)}\n"

    await callback.message.answer(text, reply_markup=reflection_keyboard())
    await state.set_state(BudgetStates.reflection)

# –ú–∏–Ω–∏-—Ä–µ—Ñ–ª–µ–∫—Å–∏—è
@dp.callback_query(lambda c: c.data.startswith("reflection"))
async def reflection(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "reflection_yes":
        await callback.message.answer("üöÄ –î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–ø–æ–≤–µ—Å—Ç–∏–º —Ç–µ–±—è –æ –Ω–æ–≤–æ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ!")
    else:
        await callback.message.answer("üëç –ì–ª–∞–≤–Ω–æ–µ ‚Äî —Ç—ã —Å–¥–µ–ª–∞–ª –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å —Å–Ω–æ–≤–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±—é–¥–∂–µ—Ç üí∞")
    await state.clear()

# -------------------- –ó–ê–ü–£–°–ö --------------------
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
